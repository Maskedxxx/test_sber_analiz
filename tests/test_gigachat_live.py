#!/usr/bin/env python3
"""
E2E-—Ç–µ—Å—Ç—ã, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:
- –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
- –ú–æ–∂–µ—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ API GigaChat (—á–µ—Ä–µ–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å OpenAI SDK)
- –£–º–µ–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ (Function Calling)

–ó–∞–ø—É—Å–∫ (–∏–∑ –∫–æ—Ä–Ω—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è):
  docker compose run --rm -e REBUILD_COLLECTION=true chatbot \
    python tests/test_gigachat_live.py

–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
- –¢–µ—Å—Ç—ã –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç—Å—è, –µ—Å–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω GigaChat-–ø—Ä–æ–≤–∞–π–¥–µ—Ä
  (–Ω—É–∂–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: –∫–∞–∫ –º–∏–Ω–∏–º—É–º GIGACHAT_CLIENT_ID/SECRET –∏–ª–∏ GIGACHAT_AUTH_KEY)
- –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è (—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞)
"""

import os
import re
import sys
import json
import time
from typing import Any, Dict, List, Tuple

# –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –∏–∑ src
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

from services.data_service import DataService
from services.llm_service import LLMService
from utils.config import config
from utils.logger import logger


def _print(msg: str):
    print(msg, flush=True)


def ensure_dirs():
    os.makedirs('test_results', exist_ok=True)


def main():
    ensure_dirs()

    # 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä GigaChat
    if not config.validate():
        _print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞. –ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        sys.exit(1)
    if config.provider != "gigachat":
        _print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ E2E: –∞–∫—Ç–∏–≤–µ–Ω –Ω–µ GigaChat-–ø—Ä–æ–≤–∞–π–¥–µ—Ä."
               " –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ GIGACHAT_* –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞.")
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–µ–∑ –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –ø–∞–π–ø–ª–∞–π–Ω –Ω–µ –ø–∞–¥–∞–ª –≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö –±–µ–∑ –∫–ª—é—á–µ–π
        sys.exit(0)

    # 2) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)
    start_init = time.time()
    data = DataService()
    data.setup_vector_store()
    llm = LLMService(data)
    init_time = time.time() - start_init

    results: List[Dict[str, Any]] = []
    captured_calls: List[Tuple[str, Dict[str, Any]]] = []

    # –ü–∞—Ç—á–∏–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π LLM
    original_llm_fc = logger.llm_function_call

    def capture_llm_function_call(name: str, args: dict):
        captured_calls.append((name, args))
        return original_llm_fc(name, args)

    logger.llm_function_call = capture_llm_function_call  # type: ignore

    # –ù–∞–±–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏
    test_prompts = [
        {
            "name": "moscow_time",
            "prompt": "–°–∫–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å –≤—Ä–µ–º–µ–Ω–∏ –≤ –ú–æ—Å–∫–≤–µ?",
            "expect_func": "get_moscow_time",
            "validate": lambda text: bool(re.search(r"\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}", text)) or ("MSK" in text or "–ú–æ—Å–∫" in text),
        },
        {
            "name": "system_stats",
            "prompt": "–ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã",
            "expect_func": "get_system_stats",
            "validate": lambda text: ("CPU" in text or "–ü–∞–º—è—Ç—å" in text or re.search(r"\d+\.?\d*%", text)),
        },
    ]

    # 3) –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ LLM (—á–µ—Ä–µ–∑ GigaChat) –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã
    all_ok = True
    for item in test_prompts:
        _print(f"\nüß™ –¢–µ—Å—Ç: {item['name']}")
        t0 = time.time()
        try:
            answer = llm.process_query(item["prompt"]) or ""
        except Exception as e:
            answer = f"<error: {e}>"
        dt = time.time() - t0

        ok_text = item["validate"](answer)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª–∞ –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑
        called_funcs = [n for (n, _a) in captured_calls]
        ok_func = item["expect_func"] in called_funcs

        results.append({
            "test": item["name"],
            "prompt": item["prompt"],
            "response_time_sec": round(dt, 2),
            "ok_text": bool(ok_text),
            "ok_function_called": bool(ok_func),
            "called_funcs": called_funcs,
            "response_preview": (answer or "")[:400],
        })

        # –î–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞: —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º, –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤—ã–∑–≤–∞—Ç—å—Å—è
        if not ok_text:
            all_ok = False
            _print(f"‚ùå –û—Ç–≤–µ—Ç –Ω–µ –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é: {answer[:160]}")
        if not ok_func:
            all_ok = False
            _print(f"‚ùå –ù–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ '{item['expect_func']}' (–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: {called_funcs})")

    # 4) –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
    report = {
        "provider": config.provider,
        "llm_model": config.llm_model,
        "init_time_sec": round(init_time, 2),
        "tests": results,
        "summary": {
            "passed": bool(all_ok),
            "failed_tests": [r["test"] for r in results if not (r["ok_text"] and r["ok_function_called"])],
        },
    }

    with open("test_results/gigachat_live.json", "w", encoding="utf-8") as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    _print("\nüíæ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: test_results/gigachat_live.json")

    # 5) –ò—Ç–æ–≥–æ–≤—ã–π –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞
    if not all_ok:
        _print("\n‚ùå E2E GigaChat —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        sys.exit(1)

    _print("\n‚úÖ E2E GigaChat —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")


if __name__ == "__main__":
    main()

