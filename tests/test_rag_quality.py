#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ RAG —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —á–∞—Ç-–±–æ—Ç–∞.

–û—Ü–µ–Ω–∏–≤–∞–µ—Ç:
- –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
- –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤  
- –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
- –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""

import sys
import os
import time
import json
from typing import List, Dict, Any, Tuple
from dataclasses import dataclass

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

from services.data_service import DataService
from utils.config import config
from utils.logger import logger


@dataclass
class TestCase:
    """–¢–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ RAG."""
    query: str
    expected_article_ids: List[int]  # ID —Å—Ç–∞—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ top_k
    expected_spheres: List[str]      # –û–∂–∏–¥–∞–µ–º—ã–µ —Å—Ñ–µ—Ä—ã
    description: str


@dataclass
class TestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞."""
    test_case: TestCase
    found_article_ids: List[int]
    precision_at_5: float
    recall_at_5: float
    response_time: float
    avg_similarity: float
    passed: bool


class RAGQualityTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ RAG —Å–∏—Å—Ç–µ–º—ã."""
    
    def __init__(self):
        self.data_service = DataService()
        self.test_cases = self._load_test_cases()
        
    def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–µ—Ä."""
        try:
            print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞ RAG...")
            
            if not config.validate():
                return False
                
            self.data_service.setup_vector_store()
            print("‚úÖ –¢–µ—Å—Ç–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def _load_test_cases(self) -> List[TestCase]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏."""
        return [
            TestCase(
                query="–Ω–æ–≤–æ—Å—Ç–∏ –æ –°–±–µ—Ä–±–∞–Ω–∫–µ",
                expected_article_ids=[1, 15, 23, 45],  # –ü—Ä–∏–º–µ—Ä ID, –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
                expected_spheres=["–§–∏–Ω–∞–Ω—Å—ã", "–ë–∞–Ω–∫–∏"],
                description="–ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –±–∞–Ω–∫–µ"
            ),
            TestCase(
                query="–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ—Ñ—Ç—è–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏",
                expected_article_ids=[3, 12, 34],
                expected_spheres=["–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞", "–ù–µ—Ñ—Ç—å"],
                description="–ü–æ–∏—Å–∫ –ø–æ –æ—Ç—Ä–∞—Å–ª–µ–≤–æ–π —Ç–µ–º–∞—Ç–∏–∫–µ"
            ),
            TestCase(
                query="–∫—É—Ä—Å –≤–∞–ª—é—Ç –∏ —Ä—É–±–ª—å",
                expected_article_ids=[5, 18, 27],
                expected_spheres=["–§–∏–Ω–∞–Ω—Å—ã", "–í–∞–ª—é—Ç–∞"],
                description="–ü–æ–∏—Å–∫ –ø–æ –≤–∞–ª—é—Ç–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–µ"
            ),
            TestCase(
                query="—Ñ–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫ –∞–∫—Ü–∏–∏",
                expected_article_ids=[7, 19, 29, 41],
                expected_spheres=["–§–∏–Ω–∞–Ω—Å—ã", "–§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫"],
                description="–ü–æ–∏—Å–∫ –ø–æ —Ñ–æ–Ω–¥–æ–≤–æ–º—É —Ä—ã–Ω–∫—É"
            ),
            TestCase(
                query="—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ IT",
                expected_article_ids=[9, 22, 35],
                expected_spheres=["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "IT"],
                description="–ü–æ–∏—Å–∫ –ø–æ IT —Å–µ–∫—Ç–æ—Ä—É"
            ),
        ]
    
    def run_all_tests(self) -> List[TestResult]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""
        print("\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞ RAG —Å–∏—Å—Ç–µ–º—ã...")
        print("="*60)
        
        results = []
        for i, test_case in enumerate(self.test_cases, 1):
            print(f"\nüìã –¢–µ—Å—Ç {i}/{len(self.test_cases)}: {test_case.description}")
            print(f"   –ó–∞–ø—Ä–æ—Å: '{test_case.query}'")
            
            result = self._run_single_test(test_case)
            results.append(result)
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
            status = "‚úÖ –ü–†–û–®–ï–õ" if result.passed else "‚ùå –ù–ï –ü–†–û–®–ï–õ"
            print(f"   {status} | Precision@5: {result.precision_at_5:.3f} | "
                  f"Recall@5: {result.recall_at_5:.3f} | "
                  f"–í—Ä–µ–º—è: {result.response_time:.2f}—Å")
        
        self._print_summary(results)
        return results
    
    def _run_single_test(self, test_case: TestCase) -> TestResult:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —Ç–µ—Å—Ç."""
        start_time = time.time()
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            search_results = self.data_service.search_articles(test_case.query, top_k=5)
            response_time = time.time() - start_time
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
            found_article_ids = [result["id"] for result in search_results["results"]]
            
            # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            precision_at_5 = self._calculate_precision_at_k(
                found_article_ids, test_case.expected_article_ids, k=5
            )
            recall_at_5 = self._calculate_recall_at_k(
                found_article_ids, test_case.expected_article_ids, k=5
            )
            
            # –°—Ä–µ–¥–Ω—è—è —Å—Ö–æ–∂–µ—Å—Ç—å
            similarities = [result["similarity"] for result in search_results["results"]]
            avg_similarity = sum(similarities) / len(similarities) if similarities else 0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ —Ç–µ—Å—Ç (–ø–æ—Ä–æ–≥–∏ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
            passed = precision_at_5 >= 0.2 and recall_at_5 >= 0.1 and response_time <= 10.0
            
            return TestResult(
                test_case=test_case,
                found_article_ids=found_article_ids,
                precision_at_5=precision_at_5,
                recall_at_5=recall_at_5,
                response_time=response_time,
                avg_similarity=avg_similarity,
                passed=passed
            )
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            return TestResult(
                test_case=test_case,
                found_article_ids=[],
                precision_at_5=0.0,
                recall_at_5=0.0,
                response_time=time.time() - start_time,
                avg_similarity=0.0,
                passed=False
            )
    
    @staticmethod
    def _calculate_precision_at_k(found_ids: List[int], expected_ids: List[int], k: int) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç Precision@K."""
        if not found_ids:
            return 0.0
        
        found_set = set(found_ids[:k])
        expected_set = set(expected_ids)
        
        relevant_found = len(found_set.intersection(expected_set))
        return relevant_found / min(len(found_ids), k)
    
    @staticmethod
    def _calculate_recall_at_k(found_ids: List[int], expected_ids: List[int], k: int) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç Recall@K."""
        if not expected_ids:
            return 1.0
        
        found_set = set(found_ids[:k])
        expected_set = set(expected_ids)
        
        relevant_found = len(found_set.intersection(expected_set))
        return relevant_found / len(expected_ids)
    
    def _print_summary(self, results: List[TestResult]):
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º —Ç–µ—Å—Ç–∞–º."""
        print("\n" + "="*60)
        print("–°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*60)
        
        passed_tests = sum(1 for r in results if r.passed)
        total_tests = len(results)
        
        avg_precision = sum(r.precision_at_5 for r in results) / total_tests
        avg_recall = sum(r.recall_at_5 for r in results) / total_tests
        avg_time = sum(r.response_time for r in results) / total_tests
        avg_similarity = sum(r.avg_similarity for r in results) / total_tests
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests} ({passed_tests/total_tests*100:.1f}%)")
        print(f"üìà –°—Ä–µ–¥–Ω–∏–π Precision@5: {avg_precision:.3f}")
        print(f"üìà –°—Ä–µ–¥–Ω–∏–π Recall@5: {avg_recall:.3f}")
        print(f"‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üéØ –°—Ä–µ–¥–Ω—è—è —Å—Ö–æ–∂–µ—Å—Ç—å: {avg_similarity:.3f}")
        
        if passed_tests == total_tests:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print(f"\n‚ö†Ô∏è  {total_tests - passed_tests} —Ç–µ—Å—Ç–æ–≤ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
    
    def analyze_collection_for_test_data(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        print("\nüîç –ê–Ω–∞–ª–∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—å–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        articles = self.data_service.load_articles()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ñ–µ—Ä–∞–º
        spheres = {}
        for article in articles:
            sphere = article.sphere
            if sphere not in spheres:
                spheres[sphere] = []
            spheres[sphere].append({
                'id': article.id,
                'title': article.article_text[:100] + '...',
                'answer': article.answer
            })
        
        print("\nüìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ñ–µ—Ä–∞–º:")
        for sphere, articles_list in spheres.items():
            print(f"  {sphere}: {len(articles_list)} —Å—Ç–∞—Ç–µ–π")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:")
        for sphere, articles_list in list(spheres.items())[:5]:
            sample_ids = [str(a['id']) for a in articles_list[:3]]
            print(f"  '{sphere.lower()}' -> ID —Å—Ç–∞—Ç–µ–π: {sample_ids}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤."""
    tester = RAGQualityTester()
    
    if not tester.initialize():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–µ—Ä")
        return
    
    # –°–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
    tester.analyze_collection_for_test_data()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    results = tester.run_all_tests()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
    results_data = []
    for result in results:
        results_data.append({
            'query': result.test_case.query,
            'description': result.test_case.description,
            'precision_at_5': result.precision_at_5,
            'recall_at_5': result.recall_at_5,
            'response_time': result.response_time,
            'avg_similarity': result.avg_similarity,
            'passed': result.passed,
            'found_article_ids': result.found_article_ids
        })
    
    with open('test_results.json', 'w', encoding='utf-8') as f:
        json.dump(results_data, f, ensure_ascii=False, indent=2)
    
    print("\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_results.json")


if __name__ == "__main__":
    main()