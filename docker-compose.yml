services:
  chatbot:
    build: .
    container_name: financial_chatbot
    stdin_open: true
    tty: true
    environment:
      # GigaChat OAuth (рекомендуется)
      - GIGACHAT_AUTH_KEY=${GIGACHAT_AUTH_KEY:-}
      - GIGACHAT_CLIENT_ID=${GIGACHAT_CLIENT_ID}
      - GIGACHAT_CLIENT_SECRET=${GIGACHAT_CLIENT_SECRET}
      - GIGACHAT_SCOPE=${GIGACHAT_SCOPE}
      - GIGACHAT_AUTH_URL=${GIGACHAT_AUTH_URL}
      - GIGACHAT_BASE_URL=${GIGACHAT_BASE_URL}
      - GIGACHAT_VERIFY_SSL=${GIGACHAT_VERIFY_SSL}
      # OpenAI (опционально для обратной совместимости)
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - DATA_PATH=data/mini_df.csv
      - CHROMA_DB_PATH=./chroma_db
      - COLLECTION_NAME=financial_news
      - REBUILD_COLLECTION=${REBUILD_COLLECTION}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL}
      - LLM_MODEL=${LLM_MODEL}
    volumes:
      # Сохраняем ChromaDB данные между запусками
      - chroma_data:/app/chroma_db
      # Монтируем данные (можно заменить на bind mount для обновления данных)
      - ./data:/app/data:ro
      # Монтируем тесты для разработки
      - ./tests:/app/tests:ro
      # Монтируем директорию для результатов тестов
      - ./test_results:/app/test_results
    restart: unless-stopped
    
  # Интерактивный сервис для ручного запуска
  chatbot-interactive:
    build: .
    container_name: financial_chatbot_interactive
    stdin_open: true
    tty: true
    environment:
      # GigaChat OAuth (рекомендуется)
      - GIGACHAT_AUTH_KEY=${GIGACHAT_AUTH_KEY:-}
      - GIGACHAT_CLIENT_ID=${GIGACHAT_CLIENT_ID}
      - GIGACHAT_CLIENT_SECRET=${GIGACHAT_CLIENT_SECRET}
      - GIGACHAT_SCOPE=${GIGACHAT_SCOPE}
      - GIGACHAT_AUTH_URL=${GIGACHAT_AUTH_URL}
      - GIGACHAT_BASE_URL=${GIGACHAT_BASE_URL}
      - GIGACHAT_VERIFY_SSL=${GIGACHAT_VERIFY_SSL}
      # OpenAI (опционально для обратной совместимости)
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - DATA_PATH=data/mini_df.csv
      - CHROMA_DB_PATH=./chroma_db
      - COLLECTION_NAME=financial_news
      - REBUILD_COLLECTION=${REBUILD_COLLECTION}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL}
      - LLM_MODEL=${LLM_MODEL}
    volumes:
      - chroma_data:/app/chroma_db
      - ./data:/app/data:ro
      - ./tests:/app/tests:ro
      - ./test_results:/app/test_results
    profiles:
      - interactive

volumes:
  chroma_data:
    driver: local
