import psutil
import pytz
from datetime import datetime
from typing import Dict, Any
from ..utils.logger import logger


class SystemService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
    
    @staticmethod
    def get_system_stats() -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã: CPU –∏ –ø–∞–º—è—Ç—å.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ CPU –∏ –ø–∞–º—è—Ç–∏
        """
        try:
            logger.info("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É CPU (–∂–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏)
            cpu_percent = psutil.cpu_percent(interval=1)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏
            memory = psutil.virtual_memory()

            stats = {
                "cpu_percent": round(cpu_percent, 1),
                "memory_percent": round(memory.percent, 1),
                "memory_available_gb": round(memory.available / (1024**3), 2),
                "memory_total_gb": round(memory.total / (1024**3), 2),
                "memory_used_gb": round(memory.used / (1024**3), 2)
            }
            
            logger.info("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª—É—á–µ–Ω–∞", **stats)
            return stats
            
        except Exception as e:
            logger.error_occurred(e, "–ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
            raise
    
    @staticmethod
    def get_moscow_time() -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ.
        
        Returns:
            –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏
        """
        try:
            logger.info("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ú–æ—Å–∫–≤–µ...")
            
            moscow_tz = pytz.timezone('Europe/Moscow')
            moscow_time = datetime.now(moscow_tz)
            
            formatted_time = moscow_time.strftime("%Y-%m-%d %H:%M:%S %Z")
            
            logger.info(f"‚úÖ –í—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ: {formatted_time}")
            return formatted_time
            
        except Exception as e:
            logger.error_occurred(e, "–ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ú–æ—Å–∫–≤–µ")
            raise
    
    @staticmethod
    def format_system_stats_for_display(stats: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        
        Args:
            stats: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Å–∏—Å—Ç–µ–º—ã
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        return f"""–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:
        CPU: {stats['cpu_percent']}%
        –ü–∞–º—è—Ç—å: {stats['memory_percent']}% 
        ({stats['memory_used_gb']} –ì–ë / {stats['memory_total_gb']} –ì–ë)
        –î–æ—Å—Ç—É–ø–Ω–æ: {stats['memory_available_gb']} –ì–ë"""