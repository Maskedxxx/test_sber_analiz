import pandas as pd
import chromadb
from chromadb.utils import embedding_functions
from typing import List, Dict, Any
from models.article import FinNewsArticle
from utils.config import config
from utils.logger import logger
from chromadb.utils.embedding_functions import SentenceTransformerEmbeddingFunction


class DataService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π."""
    
    def __init__(self):
        self.collection = None
        self.articles = []
    
    def load_articles(self) -> List[FinNewsArticle]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ CSV —Ñ–∞–π–ª–∞.
        
        Returns:
            –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ FinNewsArticle
        """
        try:
            logger.info(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {config.data_path}")
            df = pd.read_csv(config.data_path)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç—ã Pydantic
            self.articles = [FinNewsArticle(**row) for row in df.to_dict('records')]
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.articles)} —Å—Ç–∞—Ç–µ–π")
            return self.articles
            
        except FileNotFoundError:
            logger.error_occurred(
                Exception(f"–§–∞–π–ª {config.data_path} –Ω–µ –Ω–∞–π–¥–µ–Ω"), 
                "–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
            )
            raise
        except Exception as e:
            logger.error_occurred(e, "–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            raise
    
    def setup_vector_store(self) -> chromadb.Collection:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é ChromaDB —Å —ç–º–±–µ–¥–∏–Ω–≥–∞–º–∏.

        Returns:
            ChromaDB –∫–æ–ª–ª–µ–∫—Ü–∏—è
        """
        try:
            logger.info("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—ë–≥–∫—É—é –º–æ–¥–µ–ª—å –∏–∑ Hugging Face (—Ä—É—Å—Å–∫–∏–π –ø–æ–¥–¥–µ—Ä–∂–∞–Ω)
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2
            logger.info(
                "‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏–∑ Hugging Face ‚Äî —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1‚Äì5 –º–∏–Ω—É—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ",
                model=config.embedding_model,
            )
            ef = SentenceTransformerEmbeddingFunction(model_name=config.embedding_model)
            logger.info("‚úÖ –ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            client = chromadb.PersistentClient(path=config.chroma_db_path)

            if config.rebuild_collection:
                logger.info("‚ôªÔ∏è –í–∫–ª—é—á–µ–Ω REBUILD_COLLECTION=true ‚Äî –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –∫–æ–ª–ª–µ–∫—Ü–∏—é")
                # –£–¥–∞–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                try:
                    client.delete_collection(name=config.collection_name)
                    logger.info("üóëÔ∏è –°—Ç–∞—Ä–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞")
                except Exception:
                    logger.info("‚ÑπÔ∏è –°—Ç–∞—Ä–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ –±—ã–ª–æ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞")

                # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
                self.collection = client.create_collection(
                    name=config.collection_name,
                    embedding_function=ef,
                )

                if not self.articles:
                    self.load_articles()
                self._add_articles_to_collection()
                logger.info("‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∞")

            else:
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
                    self.collection = client.get_collection(
                        name=config.collection_name,
                        embedding_function=ef,
                    )
                    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è —Å {self.collection.count()} –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏")

                except Exception:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
                    logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏...")
                    self.collection = client.create_collection(
                        name=config.collection_name,
                        embedding_function=ef,
                    )

                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—å–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
                    if not self.articles:
                        self.load_articles()

                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
                    self._add_articles_to_collection()
                
            return self.collection
            
        except Exception as e:
            logger.error_occurred(e, "–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î")
            raise
    
    def _add_articles_to_collection(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—å–∏ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é."""
        documents = []
        metadatas = []
        ids = []

        for article in self.articles:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —ç–º–±–µ–¥–∏–Ω–≥–∞
            document = f"{article.reasoning} {article.article_text} {article.sphere}"
            documents.append(document)

            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata = {
                "id": article.id,
                "answer": article.answer,
                "source": article.source,
                "date": article.date.isoformat(),
                "sphere": article.sphere
            }
            metadatas.append(metadata)
            ids.append(str(article.id))

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
        self.collection.add(
            documents=documents,
            metadatas=metadatas,
            ids=ids
        )
        
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é")
    
    def search_articles(self, query: str, top_k: int = 5) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Å—Ç–∞—Ç—å—è–º.
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            top_k: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
        """
        try:
            logger.info(f"üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}' (top_k={top_k})")
            
            if not self.collection:
                raise Exception("–ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            results = self.collection.query(
                query_texts=[query],
                n_results=top_k,
                include=["documents", "metadatas", "distances"]
            )

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            import math

            formatted_results = []
            for i in range(len(results['documents'][0])):
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –∏ –∏–∑–±–µ–≥–∞–µ–º NaN/Inf –≤ JSON
                raw_distance = results['distances'][0][i]
                distance = float(raw_distance) if raw_distance is not None else None
                if isinstance(distance, float) and not math.isfinite(distance):
                    distance = None

                similarity = None
                if isinstance(distance, float) and math.isfinite(distance):
                    similarity = 1.0 - distance
                    if not math.isfinite(similarity):
                        similarity = None

                doc_text = str(results['documents'][0][i])
                snippet = doc_text[:300] + ("..." if len(doc_text) > 300 else "")

                result = {
                    "id": str(results['metadatas'][0][i].get('id')),
                    "distance": distance,
                    "similarity": similarity,
                    "answer": results['metadatas'][0][i].get('answer'),
                    "source": results['metadatas'][0][i].get('source'),
                    "date": results['metadatas'][0][i].get('date'),
                    "sphere": results['metadatas'][0][i].get('sphere'),
                    "document": snippet,
                }
                formatted_results.append(result)

            search_result = {
                "query": query,
                "total_results": len(formatted_results),
                "results": formatted_results
            }
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(formatted_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return search_result
            
        except Exception as e:
            logger.error_occurred(e, "–ø–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π")
            raise
