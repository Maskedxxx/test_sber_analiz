import pandas as pd
import chromadb
from chromadb.utils import embedding_functions
from typing import List, Dict, Any
from ..models.article import FinNewsArticle
from ..utils.config import config
from ..utils.logger import logger


class DataService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π."""
    
    def __init__(self):
        self.collection = None
        self.articles = []
    
    def load_articles(self) -> List[FinNewsArticle]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ CSV —Ñ–∞–π–ª–∞.
        
        Returns:
            –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ FinNewsArticle
        """
        try:
            logger.info(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {config.data_path}")
            df = pd.read_csv(config.data_path)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç—ã Pydantic
            self.articles = [FinNewsArticle(**row) for row in df.to_dict('records')]
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.articles)} —Å—Ç–∞—Ç–µ–π")
            return self.articles
            
        except FileNotFoundError:
            logger.error_occurred(
                Exception(f"–§–∞–π–ª {config.data_path} –Ω–µ –Ω–∞–π–¥–µ–Ω"), 
                "–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
            )
            raise
        except Exception as e:
            logger.error_occurred(e, "–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            raise
    
    def setup_vector_store(self) -> chromadb.Collection:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é ChromaDB —Å —ç–º–±–µ–¥–∏–Ω–≥–∞–º–∏.
        
        Returns:
            ChromaDB –∫–æ–ª–ª–µ–∫—Ü–∏—è
        """
        try:
            logger.info("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            
            # –°–æ–∑–¥–∞–µ–º OpenAI embedding function
            openai_ef = embedding_functions.OpenAIEmbeddingFunction(
                api_key=config.openai_api_key,
                model_name=config.embedding_model
            )

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            client = chromadb.PersistentClient(path=config.chroma_db_path)

            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
                self.collection = client.get_collection(
                    name=config.collection_name,
                    embedding_function=openai_ef
                )
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è —Å {self.collection.count()} –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏")
                
            except Exception:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
                logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏...")
                self.collection = client.create_collection(
                    name=config.collection_name,
                    embedding_function=openai_ef
                )
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—å–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
                if not self.articles:
                    self.load_articles()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
                self._add_articles_to_collection()
                
            return self.collection
            
        except Exception as e:
            logger.error_occurred(e, "–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î")
            raise
    
    def _add_articles_to_collection(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—å–∏ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é."""
        documents = []
        metadatas = []
        ids = []

        for article in self.articles:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —ç–º–±–µ–¥–∏–Ω–≥–∞
            document = f"{article.reasoning} {article.article_text} {article.sphere}"
            documents.append(document)

            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata = {
                "id": article.id,
                "answer": article.answer,
                "source": article.source,
                "date": article.date.isoformat(),
                "sphere": article.sphere
            }
            metadatas.append(metadata)
            ids.append(str(article.id))

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
        self.collection.add(
            documents=documents,
            metadatas=metadatas,
            ids=ids
        )
        
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é")
    
    def search_articles(self, query: str, top_k: int = 5) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Å—Ç–∞—Ç—å—è–º.
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            top_k: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
        """
        try:
            logger.info(f"üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}' (top_k={top_k})")
            
            if not self.collection:
                raise Exception("–ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            results = self.collection.query(
                query_texts=[query],
                n_results=top_k,
                include=["documents", "metadatas", "distances"]
            )

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            formatted_results = []
            for i in range(len(results['documents'][0])):
                result = {
                    "id": results['metadatas'][0][i]['id'],
                    "distance": results['distances'][0][i],
                    "similarity": 1 - results['distances'][0][i],  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ö–æ–∂–µ—Å—Ç—å
                    "answer": results['metadatas'][0][i]['answer'],
                    "source": results['metadatas'][0][i]['source'],
                    "date": results['metadatas'][0][i]['date'],
                    "sphere": results['metadatas'][0][i]['sphere'],
                    "document": results['documents'][0][i][:300] + "..."
                }
                formatted_results.append(result)

            search_result = {
                "query": query,
                "total_results": len(formatted_results),
                "results": formatted_results
            }
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(formatted_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return search_result
            
        except Exception as e:
            logger.error_occurred(e, "–ø–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π")
            raise